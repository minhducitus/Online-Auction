CREATE DATABASE Auction_Web;
USE Auction_Web;
SET sql_mode = 'ALLOW_INVALID_DATES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';

-- Người dùng
CREATE TABLE IF NOT EXISTS USERS
(
	USER_ID INT NOT NULL AUTO_INCREMENT,
    USER_NAME NVARCHAR(30) NOT NULL,
--  Loại người dùng    
    USER_ROLE INT,
    USER_ADDRESS NVARCHAR(60),
    USER_EMAIL VARCHAR(30),
    USER_HOTEN VARCHAR(30),
    USER_PASSWORD TEXT,
--  Điểm đánn giá của người dùng (chỉ để dùng cho bidder)
    USER_REVIEW_POINT INT,
    
    CONSTRAINT PK_USERS PRIMARY KEY (USER_ID),
);
ALTER TABLE USERS ADD COLUMN OTP INT NULL;

-- Danh mục sản phẩm
CREATE TABLE IF NOT EXISTS CATEGORIES
(
	CT_ID INT NOT NULL AUTO_INCREMENT,
    CT_NAME NVARCHAR(30) NOT NULL,
    
    CONSTRAINT PK_CATEGORIES PRIMARY KEY (CT_ID),
);
ALTER TABLE CATEGORIES
ADD FULLTEXT(CT_NAME);

-- Chứa các thông tin cơ bản của sản phẩm
CREATE TABLE IF NOT EXISTS PRODUCTS
(
	PRODUCT_ID INT NOT NULL AUTO_INCREMENT,
    PRODUCT_NAME NVARCHAR(100),
--  Sản phẩm thuộc danh mục nào
    PRODUCT_CATEGORY_ID INT NOT NULL,
--  Người đăng bán    
    PRODUCT_USER_ID INT NOT NULL,
	
    PRODUCT_IMG TEXT NOT NULL,
    PRODUCT_IMG_THUMB1 TEXT NOT NULL,
    PRODUCT_IMG_THUMB2 TEXT NOT NULL,

--	Thời gian đăng và thời gian kết thúc
    PRODUCT_TIME_PUSH DATETIME NOT NULL,
    PRODUCT_TIME_END DATETIME,

--  Giá dự kiến
    PRODUCT_EXP_PRICE DOUBLE NOT NULL,
--  Giá nhảy
    PRODUCT_EXPON_PRICE DOUBLE NOT NULL DEFAULT 100000,
--  Miêu tả
    PRODUCT_DESCRIPTION NVARCHAR(500) NOT NULL,
    
    CONSTRAINT PK_PRODUCTS PRIMARY KEY (PRODUCT_ID),
--  Sản phẩm thuộc loại
    CONSTRAINT FK_PRODUCTS_CATEGORIES FOREIGN KEY (PRODUCT_CATEGORY_ID)
    REFERENCES CATEGORIES(CT_ID),
--	Sản phẩm của người dùng nào
    CONSTRAINT FK_PRODUCTS_USERS FOREIGN KEY (PRODUCT_USER_ID)
    REFERENCES USERS(USER_ID)
);
ALTER TABLE PRODUCTS
ADD FULLTEXT(PRODUCT_NAME);
ALTER TABLE PRODUCTS
ADD COLUMN WINNER_ID INT NULL;
ALTER TABLE PRODUCTS
ADD COLUMN CURRENT_PRICE DOUBLE NULL;

-- Lịch sử ra giá
CREATE TABLE BID_LOGS 
(
	LOG_ID INT NOT NULL AUTO_INCREMENT,
	PRODUCT_ID INT NOT NULL,
    BIDDER_ID INT NOT NULL,
    PRICE_BID DOUBLE NOT NULL,
    
    CONSTRAINT PK_BID_LOGS PRIMARY KEY (LOG_ID),
    CONSTRAINT FK_BID_LOGS_PRODUCT FOREIGN KEY (PRODUCT_ID) 
    REFERENCES PRODUCTS(PRODUCT_ID)
);
ALTER TABLE BID_LOGS ADD COLUMN BID_TIME DATETIME NOT NULL;

-- Người tham gia vào đấu giá
CREATE TABLE PARTICIPANTS
(
--  Khóa ngoại không làm khóa chính được
	PARTICIPANT_ID INT NOT NULL AUTO_INCREMENT,
    BIDDER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    
    CONSTRAINT PK_PARTICIPANTS PRIMARY KEY (PARTICIPANT_ID),
    CONSTRAINT FK_PARTICIPANTS_PRODUCTS FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS(PRODUCT_ID)
    CONSTRAINT FK_PARTICIPANTS_USERS FOREIGN KEY (BIDDER_ID)
    REFERENCES USERS(USER_ID)
);

-- Rating sẽ gồm id rating người rate người bị rate và thời gian rate gọi tới chi tiết rate. Có thể rating nhiều lần
-- Rating của người dùng nào sẽ tham chiếu tới người dùng đó.  
CREATE TABLE RATINGS
(
--  ID đánh giá
	RATING_HEADER_ID INT NOT NULL AUTO_INCREMENT,
--  Người được đánh giá	
    RATED_USER_ID INT NOT NULL,
--  Người đánh giá    
    RATE_USER_ID INT NOT NULL,
--  USER_RATING INT NOT NULL,
    TIME_RATE DATETIME,
--  Trạng thái (thích hay không thích)
	RATING_STATUS BOOLEAN,
--  Nội dung    
    CONTENT TEXT,
    
    CONSTRAINT PK_RATING_HEADER PRIMARY KEY (RATING_HEADER_ID),
--  Người dùng không được tự đánh giá bản thân
    CONSTRAINT NOT_EQUAL CHECK (RATED_USER_ID <> RATE_USER_ID),
    CONSTRAINT FK_RATING_USER FOREIGN KEY (RATED_USER_ID)
    REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS WISH_LIST
(
	WISH_LIST_ID INT NOT NULL AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    
    CONSTRAINT PK_WISH_LIST PRIMARY KEY (WISH_LIST_ID),
    CONSTRAINT FK_WISH_LIST_USERS FOREIGN KEY (USER_ID)
    REFERENCES USERS(USER_ID),
    CONSTRAINT FK_WISH_LIST_PRODUCTS FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS(PRODUCT_ID)
);

-- Bảng lưu thông tin tự động đấu giá của người dùng nếu chọn.
CREATE TABLE IF NOT EXISTS AUTOMATE_BID
(
	AUTOMATE_BID_ID INT NOT NULL AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    HIGHEST_PRICE DOUBLE NOT NULL,
    
    CONSTRAINT PK_AUTOMATE_BID PRIMARY KEY (AUTOMATE_BID_ID),
    CONSTRAINT FK_AUTOMATE_BID FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCTS(PRODUCT_ID)
);

DROP TRIGGER IF EXISTS TRG_BID_LOGS;
DELIMITER $$
CREATE TRIGGER TRG_BID_LOGS
AFTER INSERT ON BID_LOGS
FOR EACH ROW
BEGIN
	UPDATE PRODUCTS P INNER JOIN BID_LOGS BL ON P.PRODUCT_ID = BL.PRODUCT_ID
	SET P.CURRENT_PRICE = (SELECT MAX(BL1.PRICE_BID) FROM BID_LOGS BL1 WHERE BL1.PRODUCT_ID = P.PRODUCT_ID);
    UPDATE PRODUCTS P INNER JOIN BID_LOGS BL ON P.PRODUCT_ID = BL.PRODUCT_ID
	SET P.WINNER_ID = (SELECT BL1.BIDDER_ID FROM BID_LOGS BL1 WHERE BL1.PRICE_BID =
					(SELECT MAX(BL2.PRICE_BID) FROM BID_LOGS BL2 WHERE BL2.PRODUCT_ID = P.PRODUCT_ID) AND P.PRODUCT_ID = BL1.PRODUCT_ID);
END$$

-- Test truy vấn người dùng với quyền
SELECT * 
FROM USERS U JOIN ROLES R 
ON U.USER_ROLE = R.ROLE_ID 
WHERE R.ROLE_DESCRIPTION LIKE 'Quản lý hệ thống.';

-- Test truy vấn danh mục header và danh mục
SELECT CH.*,  C.*
FROM CATEGORIES C JOIN CATEGORY_HEADERS CH
ON C.CT_HEADER_ID = CH.CATEGORY_HEADERS_ID;
-- WHERE C.CT_HEADER_ID = 3;

-- Test truy vấn theo nhóm sản phẩm theo Category header = 1 (Nhóm đồ điện tử)
SELECT P.*
FROM CATEGORY_HEADERS CH 
JOIN CATEGORIES C ON CH.CATEGORY_HEADERS_ID = C.CT_HEADER_ID 
JOIN PRODUCTS P ON P.PRODUCT_CATEGORY_ID = C.CT_ID
WHERE CH.CATEGORY_HEADERS_ID = 1;
